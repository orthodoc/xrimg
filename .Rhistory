write <- write.to.disk(temp.img.list)
write
length(temp.img.list)
temp.img.list
set.filepath <- function(img.list) {
filepath <- ifelse(
test = str_extract(img.list$imgURL, img.list$uid) == img.list$uid,
yes = file.path("img", basename(img.list$imgURL)),
no = file.path("img", str_c(img.list$uid, "-", basename(img.list$imgURL)))
)
}
img.list$imgURL[[1]]
img.list$imgURL[[2]]
library(parallel)
library(doParallel)
library(doParallel)
detectCores()
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
library(httr)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
temp.img.list
source('~/projects/R/xr/xray/img_download.R')
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
library(googleCloudStorageR)
install.packages(googleCloudStorageR)
install.packages("googleCloudStorageR")
library(googleCloudStorageR)
gcs_get_global_bucket()
gcs_global_bucket("xray.orthodoc.in")
gcs_get_global_bucket()
bucket <- gcs_get_bucket("xray.orthodoc.in")
library(googleCloudStorageR)
gcs_global_bucket("xray.orthodoc.in")
Sys.setenv("GCS_DEFAULT_BUCKET" = "xray.orthodoc.in")
bucket <- gcs_get_bucket("xray.orthodoc.in")
gcs_get_global_bucket()
library(googleCloudStorageR)
Sys.setenv("GCS_AUTH_FILE" = "/")
Sys.setenv("GCS_AUTH_FILE" = "~/projects/R/xr/xray/creds/VSCode-7e8aaa5474d7.json")
library(googleCloudStorageR)
gcs_get_global_bucket()
bucket <- gcs_get_bucket("xray.orthodoc.in")
install.packages("googlesheets")
library(googlesheets)
library(httr)
file.remove('.httr-oauth')
oauth2.0_token(
endpoint = oauth_endpoints("google"),
app = oauth_app(
"google",
key = getOption("googlesheets.client_id"),
secret = getOption("googlesheets.client_secret")
),
scope = c(
"https://spreadsheets.google.com/feeds",
"https://www.googleapis.com/auth/drive"),
use_oob = TRUE,
cache = TRUE
)
oauth2.0_token(
endpoint = oauth_endpoints("google"),
app = oauth_app(
"google",
key = getOption("googlesheets.client_id"),
secret = getOption("googlesheets.client_secret")
),
scope = c(
"https://spreadsheets.google.com/feeds",
"https://www.googleapis.com/auth/drive"),
use_oob = TRUE,
cache = TRUE
)
gcs_get_global_bucket()
bucket <- gcs_get_bucket("xray.orthodoc.in")
library(googleCloudStorageR)
bucket <- gcs_get_bucket("xray.orthodoc.in")
source('~/projects/R/xr/xray/Gauth.R', echo=TRUE)
library(googleCloudStorageR)
bucket <- gcs_get_bucket("xray.orthodoc.in")
# Generating .httr-oauth for authenticating to google api
library(googlesheets)
source('~/projects/R/xr/xray/Gauth.R', echo=TRUE)
gs_ls()
library(googleCloudStorageR)
bucket <- gcs_get_bucket("xray.orthodoc.in")
source('~/projects/R/xr/xray/Gauth.R', echo=TRUE)
.onAttach <- function(libname, pkgname) {
googleAuthR::gar_attach_auto_auth("https://www.googleapis.com/auth/devstorage.full_control",
environment_var = "GCS_AUTH_FILE"")
}
)
}
library(googleCloudStorageR).onAttach <- function(libname, pkgname) {
googleAuthR::gar_attach_auto_auth("https://www.googleapis.com/auth/devstorage.full_control",
environment_var = "GCS_AUTH_FILE"")
}
environment_var = "GCS_AUTH_FILE"")
.onAttach <- function(libname, pkgname) {
googleAuthR::gar_attach_auto_auth("https://www.googleapis.com/auth/devstorage.full_control",
environment_var = "GCS_AUTH_FILE")
}
library(googleCloudStorageR).onAttach()
library(googleCloudStorageR).onAttach(googleCloudStorageR, googleCloudStorageR)
libr
library(googleCloudStorageR)
bucket <- gcs_get_bucket("xray.orthodoc.in")
bucket
objects <- gcs_list_objects()
gcs_get_global_bucket()
gcs_get_global_bucket()
gcs_global_bucket("xray.orthodoc.in")
gcs_get_global_bucket()
objects <- gcs_list_objects()
gcs_upload(img.list)
# Custom function to set options for uploading
f <- function(input, output) write.csv(input, row.names = FALSE, file = output)
gcs_upload(img.list, object_function = f, type = "text/tsv")
f <- function(input, output) write.csv(input, row.names = FALSE, file = output, col.names = T, sep = "\t", qmethod = "double")
f <- function(input, output) write.tsv(input, row.names = FALSE, file = output, col.names = T, sep = "\t", qmethod = "double")
gcs_upload(img.list, object_function = f, type = "text/tsv")
f <- function(input, output) write_tsv(input, row.names = FALSE, file = output, col.names = T, sep = "\t", qmethod = "double")
gcs_upload(img.list, object_function = f, type = "text/tsv")
# Custom function to set options for uploading
library(readr)
f <- function(input, output) write_tsv(input, row.names = FALSE, file = output, col.names = T, sep = "\t", qmethod = "double")
gcs_upload(img.list, object_function = f, type = "text/tsv")
# Custom function to set options for uploading
library(readr)
f <- function(input, output) write_tsv(input, row.names = FALSE, file = output, sep = "\t")
gcs_upload(img.list, object_function = f, type = "text/tsv")
library(readr)
f <- function(input, output) write_tsv(input, output, append = F, quote_escape = "double", col_names = T)
library(googleCloudStorageR)
gcs_upload(img.list, object_function = f, type = "text/tsv")
gcs_list_objects()
gcs_upload(img.list, object_function = f, type = "text/csv")
gcs_list_objects()
gcs_get_object(gcs_list_objects()$name[[1]], saveToDisk = "sample.tsv")
sample <- read_tsv("sample.tsv")
View(sample)
rm("sample")
gcs_delete_object("img.list")
stored.img.list <= "stored.img.list.csv"
stored.img.list <- "stored.img.list.csv"
write_csv2(img.list, file = stored.img.list)
write_csv(img.list, file = stored.img.list)
write_csv2(img.list, stored.img.list)
source('~/projects/R/xr/xray/utility.R')
img.list.file <- "img.list.tsv"
try_upload_img.list <- gcs_upload(img.list.file)
source('~/projects/R/xr/xray/utility.R')
img.list.file <- "imgList.tsv"
try_upload_img.list <- gcs_upload(img.list.file)
try_upload_img.list
rm(try_upload_img.list)
source('~/projects/R/xr/xray/utility.R')
img.list.file <- "imgList.tsv"
try.upload.img.list <- gcs_upload(img.list.file)
gcs_list_buckets()
gcs_list_objects()
rm(bucket, objects, temp.img.list, try.upload.img.list, write)
gcs_get_object(gcs_list_objects()$name[[1]], saveToDisk = "parsed.img.list.tsv")
gcs_get_object(gcs_list_objects()$name[[1]], saveToDisk = "parsed.img.list.tsv")
parsed.img.list <- read_tsv("parsed.img.list.tsv")
head(parsed.img.list, 10)
gcs_get_object(gcs_list_objects()$name[[1]], saveToDisk = "parsed.img.list.tsv")
parsed.img.list <- read_tsv("parsed.img.list.tsv")
head(parsed.img.list, 10)
gcs_list_objects()
gcs_upload("imgList.tsv")
gcs_list_objects()
gcs_delete_object(img.list.file)
gcs_list_objects()
gcs_delete_object(img.list.file)
gcs_delete_object(gcs_get_object()$name[[1]])
gcs_get_object()$name
gcs_delete_object(gcs_list_objects()$name[[1]])
rm(img.list.file)
try.upload.img.list <- gcs_upload("imgList.tsv")
gcs_list_objects()
rm(parsed.img.list)
rm("parsed.img.list.tsv")
gcs_get_object(imgList.tsv, saveToDisk = "parsed.img.list.tsv")
parsed.img.list <- read_tsv("parsed.img.list.tsv")
head(parsed.img.list, 10)
gcs_get_object("imgList.tsv", saveToDisk = "parsed.img.list.tsv")
parsed.img.list <- read_tsv("parsed.img.list.tsv")
head(parsed.img.list, 10)
rm(parsed.img.list)
no.list <- read_tsv("noList.tsv")
if (no.list) {
print("download the file")
} else {
print("load the file")
}
if(file.exists("orthoList.tsv")) {
print("no need to download, just read it")
} else {
print("got to download the file")
}
gcs_get_object("noList.tsv")
gcs_get_object("noList.tsv")
gcs_list_objects()
"imgList.tsv" %in% names(gcs_list_objects())
names(gcs_list_objects())
"imgList.tsv" %in% names(gcs_list_objects()$name)
"imgList.tsv" %in% name(gcs_list_objects())
"imgList.tsv" %in% gcs_list_objects()$name
"imgList.csv" %in% gcs_list_objects()$name
source('~/projects/R/xr/xray/merge_lists.R', echo=TRUE)
img.list
source('~/projects/R/xr/xray/merge_lists.R', echo=TRUE)
get.img.list()
source('~/projects/R/xr/xray/merge_lists.R', echo=TRUE)
source('~/projects/R/xr/xray/merge_lists.R', echo=TRUE)
source('~/projects/R/xr/xray/merge_lists.R', echo=TRUE)
source('~/projects/R/xr/xray/merge_lists.R', echo=TRUE)
source('~/projects/R/xr/xray/merge_lists.R', echo=TRUE)
source('~/projects/R/xr/xray/merge_lists.R', echo=TRUE)
source('~/projects/R/xr/xray/merge_lists.R', echo=TRUE)
ls()
img.list <- get.img.list()
source('~/projects/R/xr/xray/merge_lists.R', echo=TRUE)
img.list <- get.img.list()
gcs_list_objects()
gcs_upload("orthoList.tsv")
gcs_list_objects()
gcs_upload("nihImgList.tsv")
gcs_list_objects
gcs_list_objects()
source('~/projects/R/xr/xray/merge_lists.R', echo=TRUE)
img.list <- get.img.list()
source('~/projects/R/xr/xray/merge_lists.R', echo=TRUE)
img.list <- get.img.list()
ortho.img.list <- get.ortho.list()
nih.img.list <- get.nih.img.list()
source('~/projects/R/xr/xray/merge_lists.R', echo=TRUE)
source('~/projects/R/xr/xray/load_img_lists.R', echo=TRUE)
source('~/projects/R/xr/xray/load_img_lists.R', echo=TRUE)
temp.img.list <- img.list[1;10,]
temp.img.list <- img.list[1:10,]
temp.img.list
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
filepath.list <- set.filepath(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
indice <- temp.img.list[1]
indice
indice <- temp.img.list$uid[1]
indice
url <- img.list$imgURL[1]
url
filepath <- ifelse(
test = str_extract(img.list$imgURL[1], img.list$uid[1]) == img.list$uid[1],
yes = file.path("img", basename(img.list$imgURL[1])),
no = file.path("img", str_c(img.list$uid[1], "-", basename(img.list$imgURL[1])))
)
filepath
str_extract(img.list$imgURL[1], img.list$uid[1]) == img.list$uid[1]
str_extract(img.list$imgURL[1], img.list$uid[1]) = img.list$uid[1]
str_extract(temp.img.list$imgURL[1], temp.img.list$uid[1]) == temp.img.list$uid[1]
str_extract(temp.img.list$imgURL[1], temp.img.list$uid[1]) = temp.img.list$uid[1]
str_extract(temp.img.list$imgURL[1], temp.img.list$uid[1]) == temp.img.list$uid[1]
file.path("img", str_c(temp.img.list$uid[1], "-", basename(temp.img.list$imgURL[1])))
tryCatch(download.file(url, filepath, mode = "wb"),
error = function(e) {
print(e)
print(indice)
return(indice)
err <<- c(err, indice)
})
get.img <- function(img.list) {
err <- c()
for (i in img.list) {
indice <- img.list$uid[i]
url <- img.list$imgURL[i]
filepath <- ifelse(
test = str_extract(img.list$imgURL[i], img.list$uid[i]) == img.list$uid[i],
yes = file.path("~/projects/R/xr/xray/img", basename(img.list$imgURL[i])),
no = file.path("~/projects/R/xr/xray/img", str_c(img.list$uid[i], "-", basename(img.list$imgURL[i])))
)
tryCatch(download.file(url, filepath, mode = "wb"),
error = function(e) {
print(e)
print(indice)
return(indice)
err <<- c(err, indice)
})
}
print('All saved')
}
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
temp.img.list <- img.list[123456:123461,]
temp.img.list
get.img(temp.img.list)
str_extract(imglist$imgURL[1], imglist$uid[1]) == imglist$uid[1]
str_extract(temp.img.list$imgURL[1], temp.img.list$uid[1]) == temp.img.list$uid[1]
file.path("~/projects/R/xr/xray/img", basename(temp.img.list$imgURL[i]))
file.path("~/projects/R/xr/xray/img", basename(temp.img.list$imgURL[1]))
indice <- temp.img.list$uid[1]
url <- temp.img.list$imgURL[1]
filepath <- file.path("~/projects/R/xr/xray/img", basename(temp.img.list$imgURL[1]))
err <- c()
tryCatch(download.file(url, filepath, mode = "wb"),
error = function(e) {
print(e)
print(indice)
return(indice)
err <<- c(err, indice)
})
}
tryCatch(download.file(url, filepath, mode = "wb"),
error = function(e) {
print(e)
print(indice)
return(indice)
err <<- c(err, indice)
})
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img()
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img()
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img()
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img()
indice <- temp.img.list[1]
url <- temp.img.list[1]
filepath <- ifelse(
test = str_extract(url, indice) == indice,
yes = file.path("~/projects/R/xr/xray/img", basename(url)),
no = file.path("~/projects/R/xr/xray/img", str_c(indice, "-", basename(url)))
)
str_extract(url, indice) == indice
temp.img.list
test.img.list <- img.list[1:10,]
temp.img.list
rm(test.img.list)
temp.img.list
temp.img.list <- img.list[1:10,]
install.packages("magick")
install.packages("magick")
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img()
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img()
temp.img.list
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img()
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img()
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img()
temp.img.list <- img.list[123456:123462,]
get.img()
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img()
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img()
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img()
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img()
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img()
get.img()
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img()
get.img()
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img()
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
temp.img.list <- img.list[123456:123466,]
temp.img.list <- img.list[123456:123465,]
get.img(temp.img.list)
temp.img.list <- img.list[1:10,]
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
temp.img.list <- img.list[10:19,]
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
get.img(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
library(tidyverse)
library(magick)
# download.file(img.list$imgURL, file.path("img", str_c(img.list$uid, "-", basename(img.list$imgURL))))
# set.filepath <- function(img.list) {
#   filepath <- ifelse(
#     test = str_extract(img.list$imgURL, img.list$uid) == img.list$uid,
#     yes = file.path("img", basename(img.list$imgURL)),
#     no = file.path("img", str_c(img.list$uid, "-", basename(img.list$imgURL)))
#     )
# }
get.img <- function(imgList) {
uid <- imgList$uid
filepath <- ifelse(
test = str_extract(img.list$imgURL, img.list$uid) == img.list$uid,
yes = file.path("img", basename(img.list$imgURL)),
no = file.path("img", str_c(img.list$uid, "-", basename(img.list$imgURL)))
)
err <- c()
save_image <- function(img, img_name, path) {
image_write(img, file.path(path, basename(img_name)))
}
# map(imgList, ~{
#   curr_file <- .x
#   image_read(curr_file) %>%
#     image_convert(format = "png") %>%
#     save_image(curr_file, filepath)
# })
# err <- c()
# for (i in temp.img.list) {
#   indice <- temp.img.list$uid[i]
#   url <- temp.img.list$imgURL[i]
#   filepath <- ifelse(
#     test = str_extract(url, indice) == indice,
#     yes = file.path("~/projects/R/xr/xray/img", basename(url)),
#     no = file.path("~/projects/R/xr/xray/img", str_c(indice, "-", basename(url)))
#   )
#   tryCatch(download.file(url, filepath, mode = "wb"),
#            error = function(e) {
#              print(e)
#              print(indice)
#              return(indice)
#              err <<- c(err, indice)
#            })
#   print('All saved')
# }
}
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
apply(temp.img.list, 1, get.img)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
apply(temp.img.list, 1, get.img)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
apply(temp.img.list, 1, get.img)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
apply(temp.img.list, 1, get.img)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
apply(temp.img.list, 1, get.img)
temp.img.list
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
apply(temp.img.list, 1, get.img)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
apply(temp.img.list, 1, get.img)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
apply(temp.img.list, 1, get.img)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
apply(temp.img.list, 1, get.img)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
apply(temp.img.list, 1, get.img)
temp.img.list <- img.list[112223:112225,]
temp.img.list
temp.img.list <- img.list[112223:112224,]
temp.img.list
apply(temp.img.list, 1, get.img)
apply(temp.img.list, 1, get.img)
temp.img.list <- img.list[1:3,]
apply(temp.img.list, 1, get.img)
