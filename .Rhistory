gcs_delete_object("orthoList.tsv")
gcs_delete_object("imgList.tsv")
source('~/projects/R/xr/xray/load_img_lists.R', echo=TRUE)
View(img.list)
gcs_list_objects()
gcs_delete_object("imgList.tsv")
source('~/projects/R/xr/xray/load_img_lists.R', echo=TRUE)
source('~/projects/R/xr/xray/scrape_OL.R', echo=TRUE)
View(ortho.img.list)
source('~/projects/R/xr/xray/load_img_lists.R', echo=TRUE)
View(img.list)
gcs_list_objects()
gcs_upload("imgList.tsv")
gcs_list_objects()
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
apply(img.list[1:428], 1, get.img)
apply(img.list[1:428,], 1, get.img)
apply(img.list[1:2,], 1, get.img)
img.list[1:2,]
source('~/projects/R/xr/xray/load_img_lists.R', echo=TRUE)
apply(img.list[1:2,], 1, get.img)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
apply(img.list[1:2,], 1, get.img)
apply(img.list[1:2,], 1, get.img)
id <- img.list$id[1]
filename <- str_c(id, ".png")
filename <- str_trim(filename)
filepath <- file.path("img", filename)
img <- img.list$imgURL[1]
img <- image_read(img)
img <- image_convert(img, format = "png")
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
apply(img.list[1:428,], 1, get.img)
View(ortho.img.list)
apply(img.list[378:428,], 1, get.img)
View(img.list)
img.list %>%
img.list %>%
id <- img.list[1]
filename <- str_c(id, ".png") %>% str_trim()
rm(filename)
filename <- str_c(id, ".png")
filename
rm(filename)
id[1]
filename <- str_c(id[1], ".png")
rm(filename)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
apply(temp.img.list, 1, get.img)
temp.img.list <- img.list[1:10]
temp.img.list <- img.list[1:10,]
View(temp.img.list)
apply(temp.img.list, 1, get.img)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
apply(temp.img.list, 1, get.img)
mutate(temp.img.list, img = file.path("img", str_c(temp.img.list[1], ".png")))
temp.img.list$img <- NULL
temp.img.list
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
apply(temp.img.list, 1, get.img)
typeof(temp.img.list)
source('~/projects/R/xr/xray/img_download.R', echo=TRUE)
apply(temp.img.list, 1, get.img)
View(temp.img.list)
temp.img.list %>% as_tibble()
temp.img.list %>%
as_tibble() %>%
mutate( img = str_c("img/", id, ".png"))
temp.img.list$img[1]
temp.img.list
temp.img.list <- temp.img.list %>%
as_tibble() %>%
mutate(img = str_c("img/", id, ".png"))
View(temp.img.list)
file.exists(file.path("img","1.png"))
source('~/.active-rstudio-document', echo=TRUE)
View(img.list)
source('~/.active-rstudio-document', echo=TRUE)
View(img.list)
source('~/.active-rstudio-document', echo=TRUE)
View(img.list)
img.list[377,]
summary(img.list)
dim(img.list)
img.list[377,] <- NULL
img.list[377,]
img.list[-c(377),]
img.list[377,]
sampy <- img.list[-c(377),]
sampy[377,]
file.exists(file.path("img", "377.png"))
file.exists(file.path("img", "378.png"))
file.exists(img.list$imgLocal[377])
file.exists(img.list$imgLocal[378])
img.list <- img.list[-c(377),]
write_tsv(img.list, "imgList.tsv")
gcs_upload("imgList.tsv")
gcs_save_all("img", bucket = "xray.orthodoc.in")
gcs_list_objects()
View(img.list)
source('~/projects/R/xr/xray/gce-vm.R')
library(googleComputeEngineR)
gce_get_project("vscode-238102")
Sys.setenv("GCS_AUTH_FILE" = "creds/VSCode-7e8aaa5474d7.json")
library(googleComputeEngineR)
gce_get_project("vscode-238102")
.onAttach <- function(libname, pkgname) {
googleAuthR::gar_attach_auto_auth("https://www.googleapis.com/auth/devstorage.full_control",
environment_var = "GCS_AUTH_FILE")
}
source('~/projects/R/xr/xray/utility.R')
gce_get_project("vscode-238102")
source('~/projects/R/xr/xray/gce-vm.R')
gce_get_project("vscode-238102")
gce_get_project()
vm <- gce_vm(
template = "rstudio",
name = "rstud",
username = "bdb",
password = "bdb2019(",
predefined_type = "n2-highmem-2"
)
Sys.setenv("GCS_AUTH_FILE" = "gcs-vm.json")
source('~/projects/R/xr/xray/Gauth.R')
.onAttach <- function(libname, pkgname) {
googleAuthR::gar_attach_auto_auth("https://www.googleapis.com/auth/devstorage.full_control",
environment_var = "GCS_AUTH_FILE")
}
library(googleComputeEngineR)
gce_get_project()
library(googleAuthR)
library(googleAuthR)
gar_auth()
source('~/projects/R/xr/xray/Gauth.R')
scopes <- c(
"https://www.googleapis.com/auth/devstorage.full_control",
"https://www.googleapis.com/auth/cloud-platform"
)
.onAttach <- function(libname, pkgname) {
googleAuthR::gar_attach_auto_auth(scopes, environment_var = "GCS_AUTH_FILE")
}
library(googleAuthR)
library(googleComputeEngineR)
source('~/projects/R/xr/xray/gce-vm.R')
library(googleAuthR)
# gar_auth()
library(googleComputeEngineR)
# set defaults
gce_global_project("vscode-238102")
gce_global_zone("asia-south-1")
gce_get_project()
scopes <- c(
"https://www.googleapis.com/auth/devstorage.full_control",
"https://www.googleapis.com/auth/cloud-platform",
"https://www.googleapis.com/auth/compute"
)
.onAttach <- function(libname, pkgname) {
googleAuthR::gar_attach_auto_auth(scopes, environment_var = "GCS_AUTH_FILE")
}
library(googleAuthR)
# gar_auth()
library(googleComputeEngineR)
# set defaults
gce_global_project("vscode-238102")
gce_global_zone("asia-south-1")
gce_get_project()
scopes <- c(
"https://www.googleapis.com/auth/devstorage.full_control",
"https://www.googleapis.com/auth/cloud-platform",
"https://www.googleapis.com/auth/compute"
)
.onAttach <- function(libname, pkgname) {
googleAuthR::gar_attach_auto_auth(scopes, environment_var = "GCS_AUTH_FILE")
}
library(googleAuthR)
# gar_auth()
library(googleComputeEngineR)
gce_global_project("vscode-238102")
gce_global_zone("asia-south-1")
gce_get_project()
library(googleComputeEngineR)
library(googleCloudStorageR)
gce_get_project()
.onAttach <- function(libname, pkgname) {
googleAuthR::gar_attach_auto_auth("https://www.googleapis.com/auth/cloud-platform", environment_var = "GCS_AUTH_FILE")
}
library(googleCloudStorageR)
.onAttach <- function(libname, pkgname) {
googleAuthR::gar_attach_auto_auth("https://www.googleapis.com/auth/cloud-platform", environment_var = "GCS_AUTH_FILE")
}
library(googleCloudStorageR)
gce_get_project()
library(googleComputeEngineR)
gce_get_project()
library(googleAuthR)
# gar_auth()
library(googleComputeEngineR)
# set defaults
gce_global_project("vscode-238102")
gce_global_zone("asia-south-1")
gce_get_project()
.onAttach <- function(libname, pkgname) {
googleAuthR::gar_attach_auto_auth("https://www.googleapis.com/auth/compute", environment_var = "GCS_AUTH_FILE")
}
library(googleComputeEngineR)
library(googleCloudStorageR)
gce_get_project()
gce_global_project("vscode-238102")
gce_global_zone("asia-south-1")
gce_get_project()
library(googleAuthR)
googleAuthR:::gar_gadget()
googleAuthR:::gar_gadget()
library(googleAuthR)
scopes <- c(
"https://www.googleapis.com/auth/devstorage.full_control",
"https://www.googleapis.com/auth/cloud-platform",
"https://www.googleapis.com/auth/compute"
)
options(googleAuthR.scopes.selected = scopes)
gar_auth_service("creds/gcs-vm.json")
gar_auth()
library(googleAuthR)
scopes <- c(
"https://www.googleapis.com/auth/devstorage.full_control",
"https://www.googleapis.com/auth/cloud-platform",
"https://www.googleapis.com/auth/compute"
)
options(googleAuthR.scopes.selected = scopes)
gar_auth_service("creds/gcs-vm.json")
gar_auth(email = "bdbaruah@orthodoc.in")
gar_auth()
library(googleAuthR)
# scopes <- c(
#   "https://www.googleapis.com/auth/devstorage.full_control",
#   "https://www.googleapis.com/auth/cloud-platform",
#   "https://www.googleapis.com/auth/compute"
# )
# options(googleAuthR.scopes.selected = scopes)
# gar_auth_service("creds/gcs-vm.json")
gar_auth()
library(googleComputeEngineR)
library(googleCloudStorageR)
gce_get_project("vscode-238102")
source('~/projects/R/xr/xray/gce-vm.R')
source('~/projects/R/xr/xray/gce-vm.R')
source('~/projects/R/xr/xray/gce-vm.R')
sample <- Sys.getenv("GCE_AUTH_FILE")
rm(sample)
View("~/.Renviron")
library(googleAuthR)
library(googleComputeEngineR)
# set defaults
gce_global_project("vscode-238102")
gce_global_zone("asia-south1-b")
proj <- gcs_get_object("vscode-238102")
proj <- gcs_get_object("")
proj <- gce_get_object("")
proj <- gce_get_project("")
source('~/projects/R/xr/xray/gce-vm.R')
library(googleAuthR)
library(googleComputeEngineR)
# set defaults
gce_global_project("vscode-238102")
gce_global_zone("asia-south1-b")
gce_auth()
source('~/projects/R/xr/xray/gce-vm.R')
source('~/projects/R/xr/xray/gce-vm.R')
jsonlite::unbox(jsonlite::fromJSON(Sys.getenv('GCE_AUTH_FILE'))$client_email)
jsonlite::unbox(jsonlite::fromJSON(Sys.getenv('GCE_AUTH_FILE'))$client_email)
library(googleComputeEngineR)
# set defaults
gce_global_project("vscode-238102")
gce_global_zone("asia-south1-b")
vm <- gce_vm(
template = "rstudio",
name = "rstud",
username = "bdb",
password = "bdb2019(",
predefined_type = "n2-highmem-2"
)
source('~/projects/R/xr/xray/gce-vm.R')
library(googleComputeEngineR)
# set defaults
gce_global_project("vscode-238102")
gce_global_zone("asia-south1-b")
vm <- gce_vm(
template = "rstudio",
name = "rstud",
username = "bdb",
password = "bdb2019(",
predefined_type = "n2-highmem-2"
)
Sys.getenv('GCE_AUTH_FILE'='creds/gcs-vm.json')
Sys.setenv('GCE_AUTH_FILE' = 'creds/gcs-vm.json')
vm <- gce_vm(
template = "rstudio",
name = "rstud",
username = "bdb",
password = "bdb2019(",
predefined_type = "n2-highmem-2",
disk_size_gb = "100"
)
vm <- gce_vm(
template = "rstudio",
name = "rstud",
username = "bdb",
password = "bdb2019(",
predefined_type = "n1-highmem-2",
disk_size_gb = "100"
)
vm$name
vm$status
vm$status
gce_list_instances()
vm$status
job <- gce_vm_start("rstud")
vm$machineType
gce_list_instances()
gce_vm_delete("rstud")
vm <- gce_vm(
template = "rstudio",
name = "rstud",
username = "bdb",
password = "bdb2019(",
predefined_type = "n1-highmem-2",
disk_size_gb = "100",
dynamic_image = "gcr.io/gcer-public/persistent-rstudio"
)
job <- gce_vm_stop("rstud")
job <- gce_vm_start("rstud")
job <- gce_vm_stop("rstud")
job <- gce_vm_start("rstud")
job <- gce_vm_stop("rstud")
quit()
Sys.setenv("GCE_AUTH_FILE" = "~/projects/R/xr/xray/creds/gcs-vm.json")
library(googleCloudStorageR)
Sys.setenv("GCS_AUTH_FILE" = "~/projects/R/xr/xray/creds/gcs-vm.json")
job <- gce_vm_stop("rstud")
library(googleComputeEngineR)
Sys.setenv("project" = "vscode-238102")
Sys.setenv("PROJECT" = "vscode-238102")
library(googleCloudStorageR)
gcs_list_objects()
gcs_global_bucket("xray.orthodoc.in")
gcs_list_objects()
library(googleCloudStorageR)
gcs_list_buckets()
library(googleComputeEngineR)
gce_list_instances()
# library(googleAuthR)
library(googleComputeEngineR)
# set defaults
gce_global_project("vscode-238102")
gce_global_zone("asia-south1-b")
# library(googleAuthR)
library(googleComputeEngineR)
# set defaults
gce_global_project("vscode-238102")
gce_global_zone("asia-south1-b")
gce_list_instances()
library(googleCloudStorageR)
gcs_list_objects()
# library(googleAuthR)
library(googleComputeEngineR)
# set defaults
gce_global_project("vscode-238102")
gce_global_zone("asia-south1-b")
gcs_list_objects()
# library(googleAuthR)
library(googleCloudStorageR)
library(googleComputeEngineR)
# set defaults
gce_global_project("vscode-238102")
gce_global_zone("asia-south1-b")
gcs_global_bucket("xray.orthodoc.in")
gcs_list_objects()
vm$id
vm$status
gce_vm_stop(vm$name)
vm$status
vm$status
vm$status
gce_vm_delete("rstud")
gce_vm_start("rstud")
# library(googleAuthR)
library(googleCloudStorageR)
library(googleComputeEngineR)
# set defaults
gce_global_project("vscode-238102")
gce_global_zone("asia-south1-b")
gcs_global_bucket("xray.orthodoc.in")
vm <- gce_vm(
template = "rstudio",
name = "rstud",
username = "bdb",
password = "bdb2019(",
predefined_type = "n1-highmem-2",
disk_size_gb = "100",
dynamic_image = "gcr.io/gcer-public/persistent-rstudio"
)
gce_set_metadata(list(GCS_SESSION_BUCKET = "xray.orthodoc.in"), vm)
# library(googleAuthR)
library(googleCloudStorageR)
library(googleComputeEngineR)
# set defaults
gce_global_project("vscode-238102")
gce_global_zone("asia-south1-b")
gcs_global_bucket("xray.orthodoc.in")
gcs_list_buckets()
gcs_list_buckets("vscode-238102")
gcs_get_bucket("xray.orthodoc.in")
gcs_list_objects()
q()
# library(googleAuthR)
library(googleCloudStorageR)
library(googleComputeEngineR)
# set defaults
gce_global_project("vscode-238102")
gce_global_zone("asia-south1-b")
gcs_global_bucket("xray.orthodoc.in")
gcs_list_objects()
# library(googleAuthR)
library(googleCloudStorageR)
library(googleComputeEngineR)
# set defaults
gce_global_project("vscode-238102")
gce_global_zone("asia-south1-b")
gcs_global_bucket("xray.orthodoc.in")
Sys.setenv("GCS_SESSION_BUCKET" = "xray.orthodoc.in")
# library(googleAuthR)
library(googleCloudStorageR)
library(googleComputeEngineR)
# set defaults
gce_global_project("vscode-238102")
gce_global_zone("asia-south1-b")
gcs_global_bucket("xray.orthodoc.in")
gcs_list_buckets()
gcs_list_buckets("vscode-238102")
gcs_list_objects()
path.expand("~")
# library(googleAuthR)
library(googleCloudStorageR)
library(googleComputeEngineR)
# set defaults
gce_global_project("vscode-238102")
gce_global_zone("asia-south1-b")
gcs_global_bucket("xray.orthodoc.in")
job <- gce_vm_stop("rstud")
job
vm
vm
# library(googleAuthR)
library(googleCloudStorageR)
library(googleComputeEngineR)
# set defaults
gce_global_project("vscode-238102")
gce_global_zone("asia-south1-b")
gcs_global_bucket("xray.orthodoc.in")
vm.status
gcs_list_buckets("vscode-238102")
gcs_list_objects()
# library(googleAuthR)
library(googleCloudStorageR)
library(googleComputeEngineR)
# set defaults
gce_global_project("vscode-238102")
gce_global_zone("asia-south1-b")
gcs_global_bucket("xray.orthodoc.in")
gcs_list_objects()
source('~/projects/R/xr/xray/gce-vm.R')
job <- gce_vm_start("rstud")
job <- gce_vm_stop("rstud")
job <- gce_vm_start("rstud")
install.packages("magick")
job <- gce_vm_stop("rstud")
source('~/projects/R/xr/xray/gce-vm.R')
job <- gce_vm_start("rstud")
gce_vm_stop("rstud")
gce_vm_start("rstud")
gce_vm_start("rstud")
q()
googleCloudStorageR::gcs_last()
library(googleCloudStorageR)
googleCloudStorageR::gcs_last()
library(googleCloudStorageR)
gcs_last()
library(googleCloudStorageR)
library(googleComputeEngineR)
library(googleAuthR)
gcs_last()
gcs_get_bucket()
gcs_global_bucket("xray.orthodoc.in")
gcs_get_bucket()
Sys.getenv("GCS_SESSION_BUCKET")
gcs_last()
gcs_last()
library(googleCloudStorageR)
library(googleCloudEnvironmentR)
library(googleComputeEngineR)
library(googleAuthR)
gcs_last()
gcs_last()
gcs_get_bucket_acl()
gcs_get_bucket()
gcs_global_bucket("xray.orthodoc.in")
gcs_get_bucket_acl()
gcs_last()
gcs_get_bucket()
sessionInfo()
